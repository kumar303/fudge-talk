
=======================================================
Fudging It With Mock Objects
=======================================================

:Author: Kumar McMillan
:Venue: PyCon 2011

trivia
======

.. class:: center

  .. class:: huge

    WHAT DOES PYTHON

  .. class:: huge

    HAVE MORE OF

  .. class:: huge

    BESIDES WEB FRAMEWORKS?

trivia
======

Answer: **mock testing libraries**

- chai
- Dingus
- flexmock
- fudge
- mock
- MiniMock
- Mocker
- mox
- pmock
- python-mock

Seriously?
==========

.. image:: images/lmgtfy.png

mocks
=====

.. class:: center

  .. class:: huge

    WHEN SHOULD YOU

  .. class:: huge

    USE MOCK OBJECTS?

When to use mocks...
====================

Answer: **ALMOST NEVER**

but ... **yes**, for:

1. The Internet (web service, email)
2. exception handling

When to use mocks...
====================

Answer: **ALMOST NEVER**

but ... **maybe**, to:

- make things faster
- test in greater isolation

Yet another mock library!
=========================

.. code-block:: bash

  pip install fudge

Extensive documentation:

- http://farmdev.com/projects/fudge/
- http://farmdev.com/projects/fudge/why-fudge.html

email
=====

.. code-block:: python

  >>> import smtplib
  >>> def email_admin(msg):
  ...     admin = 'kumar.mcmillan@gmail.com'
  ...     s = smtplib.SMTP()
  ...     s.sendmail('root@serv', [admin], msg)
  ...     s.quit()
  ...


test email
==========

.. hidden
  >>> import fudge

.. code-block:: python

  >>> @fudge.patch('smtplib.SMTP.sendmail',
  ...              'smtplib.SMTP.quit')
  ... def test(sendmail, quit):
  ...     sendmail.expects_call()
  ...     quit.expects_call()
  ...     email_admin('Haters gonna hate')
  ...
  >>> test()

email test
==========

.. hidden
  >>> from fudge.inspector import arg

.. code-block:: python

  >>> @fudge.patch('smtplib.SMTP.sendmail',
  ...              'smtplib.SMTP.quit')
  ... def test(sendmail, quit):
  ...     (sendmail.expects_call()
  ...      .with_args(arg.any(), ['foo@bar'], arg.any()))
  ...     email_admin('Haters gonna hate')
  ...
  >>> test()
  Traceback (most recent call last):
  ...
  AssertionError: fake:smtplib.SMTP.sendmail(arg.any(), ['foo@bar'], arg.any()) was called unexpectedly with args ('root@serv', ['kumar.mcmillan@gmail.com'], 'Haters gonna hate')

Nice traceback
==============

.. code-block:: python

  Traceback (most recent call last):
  ...
  AssertionError:
  fake:smtplib.SMTP.sendmail(arg.any(),
                             ['foo@bar'],
                             arg.any())
  was called unexpectedly with args
  ('root@serv', ['kumar.mcmillan@gmail.com'],
   'Haters gonna hate')

Exceptions
==========

.. code-block:: python

  >>> def get_data(url):
  ...     from urllib2 import urlopen, URLError
  ...     try:
  ...         f = urlopen(url)
  ...     except URLError:
  ...         return None
  ...     else:
  ...         return f.read()
  ...

Exceptions
==========

.. hidden
  >>> from urllib2 import URLError

.. code-block:: python

  >>> @fudge.patch('urllib2.urlopen')
  ... def test(urlopen):
  ...     e = URLError('nodename nor servname provided')
  ...     urlopen.expects_call().raises(e)
  ...     d = get_data('http://badmonkey.net/data.json')
  ...     assert d is None
  ...
  >>> test()

Fudge features
==============

- logical expectations

  - no postmortem inspection
  - no record/playback

- direct tracebacks
- informative exceptions
- has extensive documentation
- supports Python 3 and Jython

Just fudge it
=============

pip install fudge

http://farmdev.com/projects/fudge/

bonus: inspired by Mocha (inspired by jMock)

thanks! @kumar303
